// Copyright Project Harbor Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package data

import (
	"fmt"
	"strings"
)

// Key for the data.
type Key struct {
	// Provider name of scanner.
	Provider string
	// ReqID is the request UUID.
	ReqID string
	// Mimetype is the mimetype of the result generated by the scanner.
	Mimetype string
	prefix   []string
}

// AppendPrefix appends prefix as part of the key.
func (k *Key) AppendPrefix(prefix string) *Key {
	// Duplicated prefix is not allowed.
	for _, p := range k.prefix {
		if p == prefix {
			return k
		}
	}

	k.prefix = append(k.prefix, prefix)
	return k
}

// String format of the key.
func (k *Key) String() string {
	start := strings.Join(k.prefix, ":")
	segments := make([]string, 0)
	if len(start) > 0 {
		segments = append(segments, start)
	}

	// Append other segments.
	segments = append(segments, k.ReqID, k.Provider, k.Mimetype)

	return strings.ReplaceAll(strings.Join(segments, ":"), " ", "_")
}

// Validate the Key.
func (k *Key) Validate() error {
	if k == nil {
		return fmt.Errorf("nil data key")
	}

	if k.ReqID == "" {
		return fmt.Errorf("empty request ID of data key")
	}

	if k.Provider == "" {
		return fmt.Errorf("empty provider of data key")
	}

	if k.Mimetype == "" {
		return fmt.Errorf("empty mimetype of data key")
	}

	return nil
}
