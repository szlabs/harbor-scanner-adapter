/*
 * Harbor Scanner Adapter API
 *
 * ## Overview  This API must be implemented in order to register a new artifact scanner in [Harbor](https://goharbor.io) registry.  The [/scan](#operation/AcceptScanRequest) and [/scan/{scan_request_id}/report](#operation/GetScanReport) operations are responsible for the actual scanning and return a scan report that is visible in the Harbor web console.  The [/scan](#operation/AcceptScanRequest) operation is asynchronous. It should enqueue the job for processing a scan request and return the identifier. This allows Harbor to poll a corresponding scan report with the [/scan/{scan_request_id}/report](#operation/GetScanReport) operation. Harbor will call the [/scan/{scan_request_id}/report](#operation/GetScanReport) operation periodically periodically until it returns 200 or 500 status codes.  The [/metadata](#operation/GetMetadata) operation allows a Harbor admin to configure and register a scanner and discover its capabilities.  ## Supported consumed MIME spec  - `application/vnd.oci.image.manifest.v1+json` - `application/vnd.docker.distribution.manifest.v2+json`  ## Supported produced MIME spec  - `application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0` - `application/vnd.security.vulnerability.report; version=1.1` - `application/vnd.scanner.adapter.vuln.report.raw` - `application/vnd.security.cis.report; version=1.0`
 *
 * API version: 1.2
 * Contact: cncf-harbor-maintainers@lists.cncf.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package mux

import (
	"encoding/json"
	"fmt"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// Route of the API handler.
type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

// Routes of the scanner adapter API handlers.
type Routes []Route

// NewRouter registers API routes.
func NewRouter() *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc
		handler = Logger(handler, route.Name)

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}

	return router
}

// Index of the API.
func Index(w http.ResponseWriter, r *http.Request) {
	// Append host info.
	var res []*API
	res = append(res, APIIndex...)
	for _, a := range res {
		a.Host = r.Host
	}

	data, _ := json.Marshal(res)

	w.Header().Set(headerContentType, applicationJSON)
	fmt.Fprintf(w, string(data))
}

var routes = Routes{
	Route{
		"Index",
		"GET",
		"/",
		Index,
	},

	Route{
		"AcceptScanRequest",
		strings.ToUpper("Post"),
		"/scan",
		AcceptScanRequest,
	},

	Route{
		"GetMetadata",
		strings.ToUpper("Get"),
		"/metadata",
		GetMetadata,
	},

	Route{
		"GetScanReport",
		strings.ToUpper("Get"),
		"/scan/{scan_request_id}/report",
		GetScanReport,
	},
}

// API info.
type API struct {
	Name   string `json:"name"`
	Method string `json:"method"`
	Host   string `json:"host"'`
	API    string `json:"API"`
}

// APIIndex is index of all scanner adapter API.
var APIIndex []*API

func init() {
	for _, r := range routes {
		APIIndex = append(APIIndex, &API{
			Name:   r.Name,
			Method: r.Method,
			API:    r.Pattern,
		})
	}
}
