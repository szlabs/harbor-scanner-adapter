/*
 * Harbor Scanner Adapter API
 *
 * ## Overview  This API must be implemented in order to register a new artifact scanner in [Harbor](https://goharbor.io) registry.  The [/scan](#operation/AcceptScanRequest) and [/scan/{scan_request_id}/report](#operation/GetScanReport) operations are responsible for the actual scanning and return a scan report that is visible in the Harbor web console.  The [/scan](#operation/AcceptScanRequest) operation is asynchronous. It should enqueue the job for processing a scan request and return the identifier. This allows Harbor to poll a corresponding scan report with the [/scan/{scan_request_id}/report](#operation/GetScanReport) operation. Harbor will call the [/scan/{scan_request_id}/report](#operation/GetScanReport) operation periodically periodically until it returns 200 or 500 status codes.  The [/metadata](#operation/GetMetadata) operation allows a Harbor admin to configure and register a scanner and discover its capabilities.  ## Supported consumed MIME spec  - `application/vnd.oci.image.manifest.v1+json` - `application/vnd.docker.distribution.manifest.v2+json`  ## Supported produced MIME spec  - `application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0` - `application/vnd.security.vulnerability.report; version=1.1` - `application/vnd.scanner.adapter.vuln.report.raw` - `application/vnd.security.cis.report; version=1.0`
 *
 * API version: 1.2
 * Contact: cncf-harbor-maintainers@lists.cncf.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package mux

import (
	"encoding/json"
	"io/ioutil"
	"net/http"

	"github.com/szlabs/harbor-scanner-adapter/server/spec"

	"github.com/gorilla/mux"
)

func AcceptScanRequest(w http.ResponseWriter, r *http.Request) {
	bytes, err := ioutil.ReadAll(r.Body)
	if err != nil {
		InternalServerError("read request error", err).Write(w)
		return
	}

	req := &spec.ScanRequest{}
	if err := json.Unmarshal(bytes, req); err != nil {
		BadRequestError("marshal request json data error", err).Write(w)
		return
	}

	dt, _ := json.Marshal(&spec.ScanResponse{
		Id: "0001-111-11",
	})
	JSON(dt).Write(w)
}

func GetMetadata(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("{}"))
}

func GetScanReport(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	reqID := vars["scan_request_id"]

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte(reqID))
}
